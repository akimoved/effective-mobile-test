openapi: 3.0.3
info:
  title: Bank Cards API
  description: REST API для управления банковскими картами и переводами между ними
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: Authentication
    description: Аутентификация и авторизация
  - name: Cards
    description: Управление банковскими картами
  - name: Transactions
    description: Переводы и операции с картами

security:
  - BearerAuth: []

paths:
  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Регистрация пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Аутентификация пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/validate:
    post:
      tags: [Authentication]
      summary: Проверка валидности токена
      security: []
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Результат проверки
          content:
            application/json:
              schema:
                type: boolean

  /api/cards:
    post:
      tags: [Cards]
      summary: Создание карты
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
      responses:
        '201':
          description: Карта создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags: [Cards]
      summary: Получение карт пользователя
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Список карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cards/{cardId}:
    get:
      tags: [Cards]
      summary: Получение карты по ID
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о карте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Cards]
      summary: Обновление карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequest'
      responses:
        '200':
          description: Карта обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Cards]
      summary: Удаление карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Карта удалена
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cards/{cardId}/block:
    post:
      tags: [Cards]
      summary: Блокировка карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта заблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cards/{cardId}/unblock:
    post:
      tags: [Cards]
      summary: Разблокировка карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта разблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cards/search:
    get:
      tags: [Cards]
      summary: Поиск карты по номеру (только для администраторов)
      parameters:
        - name: cardNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cards/admin/all:
    get:
      tags: [Cards]
      summary: Получение всех карт (только для администраторов)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/AdminSizeParam'
      responses:
        '200':
          description: Список всех карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions:
    post:
      tags: [Transactions]
      summary: Создание перевода
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
      responses:
        '201':
          description: Перевод создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags: [Transactions]
      summary: История переводов пользователя
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: История переводов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTransactionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions/{transactionId}:
    get:
      tags: [Transactions]
      summary: Получение транзакции по ID
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о транзакции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions/card/{cardId}:
    get:
      tags: [Transactions]
      summary: Переводы конкретной карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Переводы карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTransactionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions/internal:
    get:
      tags: [Transactions]
      summary: Внутренние переводы пользователя
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Внутренние переводы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTransactionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions/balance/{cardId}:
    get:
      tags: [Transactions]
      summary: Получение баланса карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Баланс карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions/balances:
    get:
      tags: [Transactions]
      summary: Балансы всех карт пользователя
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Балансы карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBalanceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/transactions/admin/all:
    get:
      tags: [Transactions]
      summary: Все транзакции (только для администраторов)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/AdminSizeParam'
      responses:
        '200':
          description: Список всех транзакций
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTransactionResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0

    SizeParam:
      name: size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

    AdminSizeParam:
      name: size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Конфликт данных
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # Request DTOs
    RegisterRequest:
      type: object
      required: [username, email, password, firstName, lastName]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          minLength: 6
          maxLength: 100
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50

    LoginRequest:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
        password:
          type: string

    CardCreateRequest:
      type: object
      required: [cardNumber, cardholderName]
      properties:
        cardNumber:
          type: string
          minLength: 16
          maxLength: 19
          pattern: '^\\d{16}$'
          description: "Номер карты должен содержать 16 цифр"
        cardholderName:
          type: string
          maxLength: 100

    CardUpdateRequest:
      type: object
      properties:
        cardholderName:
          type: string
          maxLength: 100
        status:
          $ref: '#/components/schemas/CardStatus'

    TransactionCreateRequest:
      type: object
      required: [fromCardId, toCardId, amount]
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
          format: decimal
          minimum: 0.01
        description:
          type: string
          maxLength: 500

    # Response DTOs
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          format: int64

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardNumber:
          type: string
        cardholderName:
          type: string
        status:
          $ref: '#/components/schemas/CardStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardId:
          type: integer
          format: int64
        fromCardNumber:
          type: string
        toCardId:
          type: integer
          format: int64
        toCardNumber:
          type: string
        amount:
          type: number
          format: decimal
        description:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        transactionDate:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        errorMessage:
          type: string
          nullable: true

    BalanceResponse:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
        maskedCardNumber:
          type: string
        balance:
          type: number
          format: decimal
        cardholderName:
          type: string

    # Enums
    CardStatus:
      type: string
      enum: [ACTIVE, BLOCKED, EXPIRED]

    TransactionStatus:
      type: string
      enum: [PENDING, COMPLETED, FAILED, CANCELLED]

    # Pagination
    PageCardResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean

    PageTransactionResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean

    PageBalanceResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BalanceResponse'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean

    # Error response
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
